#!/usr/bin/python3
"""
Unittest for matrix_mul(m_a, m_b)
"""

import unittest
from contextlib import redirect_stdout
from io import StringIO
matrix_mul = __import__('100-matrix_mul').matrix_mul

class TestMatrixMul(unittest.TestCase):
    def test_matrix_multiplication(self):
        m_a = [[1, 2], [3, 4]]
        m_b = [[1, 2], [3, 4]]
        expected_result = [[7, 10], [15, 22]]
        self.assertEqual(matrix_mul(m_a, m_b), expected_result)

        m_a = [[1, 2]]
        m_b = [[3, 4], [5, 6]]
        expected_result = [[13, 16]]
        self.assertEqual(matrix_mul(m_a, m_b), expected_result)

    def test_empty_matrices(self):
        m_a = []
        m_b = [[]]
        with self.assertRaises(ValueError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_a can't be empty or m_b can't be empty")

    def test_non_list_input(self):
        m_a = 123
        m_b = [[1, 2], [3, 4]]
        with self.assertRaises(TypeError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_a must be a list and m_b must be a list")

        m_a = [[1, 2], [3, 4]]
        m_b = "matrix"
        with self.assertRaises(TypeError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_a must be a list of lists and m_b must be a list of lists")

    def test_invalid_element_type(self):
        m_a = [[1, 2], [3, 4.5]]
        m_b = [[1, 2], [3, 4]]
        with self.assertRaises(TypeError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_a should contain only integers or floats or m_b should contain only integers or floats")

    def test_invalid_matrix_size(self):
        m_a = [[1, 2], [3, 4]]
        m_b = [[1, 2, 3], [4, 5, 6]]
        with self.assertRaises(TypeError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "each row of m_a must be of the same size or each row of m_b must be of the same size")

    def test_incompatible_matrices(self):
        m_a = [[1, 2], [3, 4]]
        m_b = [[1, 2], [3, 4], [5, 6]]
        with self.assertRaises(ValueError) as context:
            matrix_mul(m_a, m_b)
        self.assertEqual(str(context.exception), "m_a and m_b can't be multiplied")

if __name__ == '__main__':
    unittest.main()
